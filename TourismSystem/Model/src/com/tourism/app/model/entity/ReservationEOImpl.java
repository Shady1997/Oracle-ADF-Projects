package com.tourism.app.model.entity;

import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Nov 28 09:51:42 EET 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ReservationEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        ReservationId {
            public Object get(ReservationEOImpl obj) {
                return obj.getReservationId();
            }

            public void put(ReservationEOImpl obj, Object value) {
                obj.setReservationId((Number)value);
            }
        }
        ,
        ReservationDate {
            public Object get(ReservationEOImpl obj) {
                return obj.getReservationDate();
            }

            public void put(ReservationEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        TripId {
            public Object get(ReservationEOImpl obj) {
                return obj.getTripId();
            }

            public void put(ReservationEOImpl obj, Object value) {
                obj.setTripId((Number)value);
            }
        }
        ,
        Invoice {
            public Object get(ReservationEOImpl obj) {
                return obj.getInvoice();
            }

            public void put(ReservationEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Passengers {
            public Object get(ReservationEOImpl obj) {
                return obj.getPassengers();
            }

            public void put(ReservationEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Trips {
            public Object get(ReservationEOImpl obj) {
                return obj.getTrips();
            }

            public void put(ReservationEOImpl obj, Object value) {
                obj.setTrips((EntityImpl)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(ReservationEOImpl object);

        public abstract void put(ReservationEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int RESERVATIONID = AttributesEnum.ReservationId.index();
    public static final int RESERVATIONDATE = AttributesEnum.ReservationDate.index();
    public static final int TRIPID = AttributesEnum.TripId.index();
    public static final int INVOICE = AttributesEnum.Invoice.index();
    public static final int PASSENGERS = AttributesEnum.Passengers.index();
    public static final int TRIPS = AttributesEnum.Trips.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ReservationEOImpl() {
    }



   
    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("com.tourism.app.model.entity.ReservationEO");
    }

    /**
     * Gets the attribute value for ReservationId, using the alias name ReservationId.
     * @return the value of ReservationId
     */
    public Number getReservationId() {
        return (Number)getAttributeInternal(RESERVATIONID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ReservationId.
     * @param value value to set the ReservationId
     */
    public void setReservationId(Number value) {
        setAttributeInternal(RESERVATIONID, value);
    }

    /**
     * Gets the attribute value for ReservationDate, using the alias name ReservationDate.
     * @return the value of ReservationDate
     */
    public Date getReservationDate() {
        return (Date)getAttributeInternal(RESERVATIONDATE);
    }

    /**
     * Gets the attribute value for TripId, using the alias name TripId.
     * @return the value of TripId
     */
    public Number getTripId() {
        return (Number)getAttributeInternal(TRIPID);
    }

    /**
     * Sets <code>value</code> as the attribute value for TripId.
     * @param value value to set the TripId
     */
    public void setTripId(Number value) {
        setAttributeInternal(TRIPID, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getInvoice() {
        return (RowIterator)getAttributeInternal(INVOICE);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getPassengers() {
        return (RowIterator)getAttributeInternal(PASSENGERS);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getTrips() {
        return (EntityImpl)getAttributeInternal(TRIPS);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setTrips(EntityImpl value) {
        setAttributeInternal(TRIPS, value);
    }


    /**
     * @param reservationId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number reservationId) {
        return new Key(new Object[]{reservationId});
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}
